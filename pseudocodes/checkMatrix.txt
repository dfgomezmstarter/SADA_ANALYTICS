from simpleGaussianMethod import simpleGaussianMethod
from partialGaussianMethod import partialGaussianMethod
from totalGaussianMethod import totalGaussianMethod
from LuSimpleMethod import LuSimpleMethod
from matrixFunction import matrixFunction

Input: square nxn matrix A,colum vector b, string method_type
Output: solution array x with steps in a dictionary

begin solveMatrix
	Input: square nxn matrix A,colum vector b, string method_type
	Output: solution array x with steps

	determinat(A)
	Augmented_matrix <- matrixFunction.mixMatrix(matrix A, vector b)
	if  method_type = 'S' then
		matrix_a, vector_b, array_steps <- simpleGaussianMethod(Augmented_matrix)
	if  method_type = 'P' then
		matrix_a, vector_b, array_steps <- partialGaussianMethod(Augmented_matrix)
	if  method_type = 'T' then
		matrix_a, vector_b, array_steps <- totalGaussianMethod(Augmented_matrix)
	if  method_type = 'LUS' then
		matrix_l,matrix_u,dic,dic_l,dic_u <- LuSimpleMethod(Augmented_matrix)
	else
		break;
	x <- array_steps
end solveMatrix
