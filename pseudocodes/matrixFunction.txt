
begin determinant
	Input: square nxn matrix A
	Output: boolean if matrix has inverse

	if det(A) = 0 then
		break;
end determinant

begin mixMatrix
	Input: square nxn matrix A,colum vector b
	Output: Augmented_matrix 

	if (A is not square) or (size of A and size of b are not compatible) then
		break;
	else
		Augmented_matrix <- [A,b]
end mix_matrix

begin solution
	Input: square nxn matrix A,colum vector b
	Output: solution vector x

	Augmented_matrix <- mixMatrix(matrix A, vector b)
	x <- findSolution(Augmented_matrix)
end solution

begin sort
	Input: solution vector x, array column movement
	Output: sort vector x

	for i from 0 to len(movement)-2 do 
		switch x[i] and x[i+1]
	x
end sort

begin extractDLU
	Input: square nxn matrix A
	Output: vector d , vector l ,vector u

	d <- vector with principal diagonal values from matrix a
	l <- vector with lower triangular values from matrix a
	u <- vector with upper triangular values from matrix a
end extractDLU